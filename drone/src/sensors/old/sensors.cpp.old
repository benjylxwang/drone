
#include <Arduino.h>
#include <stdint.h>
#include <Wire.h>
#include <math.h>
#include "sensors.h"

#include "../../constants.h"
#include "../smoothing.h"

Sensors::Sensors()
{
}

void Sensors::setup()
{
    pinMode(LED_BUILTIN, OUTPUT);

    Wire.setSDA(I2C_SDA);
    Wire.setSCL(I2C_SCL);

    calibrate();

    // Setup pressure senesor
    if (pressure.begin())
    {
        Serial.println("BMP180 init success");
        State temp;
        baseline = readPressure(temp);
    }
    else
    {

        while (1)
            Serial.println("BMP180 init fail\n\n"); // Pause forever.
    }
}

void Sensors::update(State &state, unsigned long deltaTime)
{
    readGyro(state, deltaTime);

    // Run pressure update
    // readPressure(state);
    // state.altitude = pressure.altitude(state.pressure, baseline);
}

void Sensors::calibrate()
{
    calibrateGyroAccel();
}

void Sensors::calibrateGyroAccel() {
    // Setup gyro
    Wire.begin();
    Wire.beginTransmission(gyro_addr);
    Wire.write(0x6B); // PWR_MGMT_1 register
    Wire.write(0);    // Wakes up gyro
    Wire.endTransmission(true);

    double rawX, rawY, rawZ;
    
    for(int i=0; i<200; i++)
    {
      Wire.beginTransmission(0x68);            //begin, Send the slave adress (in this case 68) 
      Wire.write(0x43);                        //First adress of the Gyro data
      Wire.endTransmission(false);
      Wire.requestFrom(0x68,4,true);           //We ask for just 4 registers 
         
      rawX = Wire.read()<<8|Wire.read();     //Once again we shif and sum
      rawY = Wire.read()<<8|Wire.read();
   
      /*---X---*/
      gyroErrorX = gyroErrorX + (rawX/131.0); 
      /*---Y---*/
      gyroErrorY = gyroErrorY + (rawY/131.0);
    }
    gyroErrorX /= 200;
    gyroErrorY /= 200;

    for(int i=0; i<200; i++)
    {
      Wire.beginTransmission(0x68);
      Wire.write(0x3B);                       //Ask for the 0x3B register- correspond to AcX
      Wire.endTransmission(false);
      Wire.requestFrom(0x68,6,true); 
         
      rawX=(Wire.read()<<8|Wire.read())/16384.0 ; //each value needs two registres
      rawY=(Wire.read()<<8|Wire.read())/16384.0 ;
      rawZ=(Wire.read()<<8|Wire.read())/16384.0 ;
   
      /*---X---*/
      accelErrorX = accelErrorX + ((atan((rawY)/sqrt(pow((rawX),2) + pow((rawZ),2))) * RAD_TO_DEG));; 
      /*---Y---*/
      accelErrorY = accelErrorY + ((atan(-1*(rawX)/sqrt(pow((rawY),2) + pow((rawZ),2))) * RAD_TO_DEG));
    }
    accelErrorX /= 200;
    accelErrorY /= 200;
}

void Sensors::readGyro(State &state, unsigned long deltaTime)
{
    // Get gyro values
    Wire.beginTransmission(gyro_addr);
    Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H)
    Wire.endTransmission(false);
    Wire.requestFrom(gyro_addr, 14, true); // request a total of 14 registers

    // Apply smoothing to values
    // state.AcX = smoothing(readWireAsAccel(), state.AcX, ACCELEROMETER_SMOOTHING_FACTOR); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
    // state.AcY = smoothing(readWireAsAccel(), state.AcY, ACCELEROMETER_SMOOTHING_FACTOR); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
    // state.AcZ = smoothing(readWireAsAccel(), state.AcZ, ACCELEROMETER_SMOOTHING_FACTOR); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
    // state.Tmp = Wire.read() << 8 | Wire.read(); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
    // state.GyX = smoothing(readWireAsGyro(gyroErrorX), state.GyX, GYRO_SMOOTHING_FACTOR); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
    // state.GyY = smoothing(readWireAsGyro(gyroErrorY), state.GyY, GYRO_SMOOTHING_FACTOR); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
    // state.GyZ = smoothing(readWireAsGyro(0), state.GyZ, GYRO_SMOOTHING_FACTOR); // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)

    // Version with no smoothing
    state.AcX = readWireAsAccel(); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
    state.AcY = readWireAsAccel(); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
    state.AcZ = readWireAsAccel(); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
    state.Tmp = Wire.read() << 8 | Wire.read(); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
    state.GyX = readWireAsGyro(gyroErrorX); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
    state.GyY = readWireAsGyro(gyroErrorY); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
    state.GyZ = readWireAsGyro(0); // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)


    // Calculate x and y angles in degrees
    state.gyAngleX = state.GyX * deltaTime / 1000;
    state.gyAngleY = state.GyY * deltaTime / 1000;
    state.accelAngleX = (atan((state.AcY)/sqrt(pow((state.AcX),2) + pow((state.AcZ),2)))*RAD_TO_DEG) - accelErrorX;
    state.accelAngleY = (atan(-1*(state.AcX)/sqrt(pow((state.AcY),2) + pow((state.AcZ),2)))*RAD_TO_DEG) - accelErrorY;   

    // Final angles
    state.angleX = 0.98 * (state.angleX + state.gyAngleX) + 0.02 * state.accelAngleX;
    state.angleY = 0.98 * (state.angleY + state.gyAngleY) + 0.02 * state.accelAngleY;
}

double Sensors::readWireAsGyro(int error) {
    return ((Wire.read() << 8 | Wire.read()) / 131) - error;
}

double Sensors::readWireAsAccel() {
    return ((Wire.read() << 8 | Wire.read()) / 16384.0);
}

double Sensors::readPressure(State& state)
{
    char status;
    double T, P, p0, a;
    status = pressure.startTemperature();
    if (status != 0)
    {
        delay(status);
        status = pressure.getTemperature(T);
        if (status != 0)
        {
            state.temperature = smoothing(T, state.temperature, TEMPERATURE_SMOOTHING_FACTOR);
            status = pressure.startPressure(3);
            if (status != 0)
            {
                delay(status);
                status = pressure.getPressure(P, T);
                if (status != 0)
                {
                    state.pressure = smoothing(P, state.pressure, PRESSURE_SMOOTHING_FACTOR);
                    return (P);
                }
                else
                    Serial.println("error retrieving pressure measurement\n");
            }
            else
                Serial.println("error starting pressure measurement\n");
        }
        else
            Serial.println("error retrieving temperature measurement\n");
    }
    else
        Serial.println("error starting temperature measurement\n");
}